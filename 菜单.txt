<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÁæéÈ£üÈöèÊú∫ÈÄâÊã©</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', sans-serif;
            background-color: #f8f3e6;
            color: #5a3921;
            text-align: center;
            margin: 0;
            padding: 20px;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><path fill="%23e8d5b5" d="M0 0h100v100H0z"/><path fill="none" stroke="%23d9c7a7" stroke-width="0.5" d="M0 0l100 100M100 0L0 100"/></svg>');
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background-color: rgba(255, 253, 245, 0.9);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #d9c7a7;
        }
        
        h1 {
            color: #8c2318;
            font-size: 2.5em;
            margin-bottom: 30px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        
        h1:before, h1:after {
            content: "üçñ";
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.2em;
        }
        
        h1:before {
            left: -40px;
        }
        
        h1:after {
            right: -40px;
        }
        
        .result-box {
            height: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 30px 0;
            position: relative;
            overflow: hidden;
        }
        
        .result {
            font-size: 2em;
            font-weight: bold;
            color: #5a3921;
            padding: 15px 25px;
            background-color: #f0e6d2;
            border-radius: 10px;
            border: 1px solid #d9c7a7;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
            min-width: 200px;
            transition: transform 0.1s, opacity 0.1s;
        }
        
        .flash {
            animation: flash 0.1s;
        }
        
        @keyframes flash {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }
        
        .buttons {
            margin-top: 30px;
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        button {
            background-color: #8c2318;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 30px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
            min-width: 120px;
        }
        
        button:hover {
            background-color: #a52a1f;
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        button.secondary {
            background-color: #5a3921;
        }
        
        button.secondary:hover {
            background-color: #6d4a31;
        }
        
        .file-input {
            display: none;
        }
        
        .file-label {
            display: inline-block;
            background-color: #5a3921;
            color: white;
            padding: 10px 20px;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .file-label:hover {
            background-color: #6d4a31;
        }
        
        .footer {
            margin-top: 30px;
            font-size: 0.9em;
            color: #8c8c8c;
        }
        
        .exclude-section {
            margin: 20px 0;
            padding: 15px;
            background-color: #f0e6d2;
            border-radius: 10px;
            border: 1px solid #d9c7a7;
        }
        
        .exclude-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .exclude-options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            justify-content: center;
        }
        
        .exclude-checkbox {
            display: none;
        }
        
        .exclude-label {
            display: inline-block;
            padding: 5px 12px;
            background-color: #e8d5b5;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9em;
        }
        
        .exclude-checkbox:checked + .exclude-label {
            background-color: #8c2318;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ÁæéÈ£ü</h1>
        
        <div class="result-box">
            <div class="result" id="result">ÁÇπÂáªÂºÄÂßãÈÄâÊã©</div>
        </div>
        
        <div class="exclude-section">
            <div class="exclude-title">‰ªäÂ§©‰∏çÂñúÊ¨¢Ëøô‰∫õËÇâÁ±ªÔºö</div>
            <div class="exclude-options" id="excludeOptions">
                <!-- ÈÄâÈ°πÂ∞ÜÈÄöËøáJSÂä®ÊÄÅÁîüÊàê -->
            </div>
        </div>
        
        <div class="buttons">
            <button id="startBtn">ÂºÄÂßãÈÄâÊã©</button>
            <button class="secondary" id="importBtn">ÂØºÂÖ•ÈÄâÊã©</button>
            <input type="file" id="fileInput" class="file-input" accept=".json,.txt">
        </div>
        
        <div class="footer">
            ‰ªäÊó•ÂêÉ‰ªÄ‰πàËÇâü•© - Ëß£ÂÜ≥ÊÇ®ÁöÑÈÄâÊã©Âõ∞ÈöæÁóá
        </div>
    </div>

    <script>
        // ÈªòËÆ§ËÇâÁ±ªÈÄâÈ°π
        const defaultMeats = [
            "ÈáåËÑäËÇâ", "‰∫îËä±ËÇâ", "ÊéíÈ™®", "Áå™ËπÑ", "Áå™ËÇù", 
            "ÁâõÈáåËÑä", "ÁâõËÖ±Â≠ê", "ÁâõËÖ©", "ÁâõËÇãÊù°", "ÁâõËÇâÊú´", 
            "È∏°ËÖø", "È∏°ÁøÖ", "È∏°ËÉ∏ËÇâ", "Êï¥È∏°", "È∏°ÊùÇ", 
            "È∏≠ËÖø", "Êï¥È∏≠", "È≤àÈ±º", "È≤´È±º", "ËçâÈ±º", 
            "ÈáëÊû™È±º", "Ëôæ", "Âü∫Âõ¥Ëôæ", "Â∞èÈæôËôæ", "È±øÈ±º", 
            "ÊâáË¥ù", "ÁæäËÇâ", "ÂÖîËÇâ", "ËÇ•ÁâõÂç∑", "ËÖäËÇ†", 
            "È¶ôËÇ†", "ËÇâ‰∏∏", "ËÇâÊú´", "ÊùÇÁ¢é", "Âç§Âë≥ÊãºÁõò", 
            "Áå™ËÄ≥Êúµ", "ÁæäÊéí", "È≥ùÈ±º", "‰∏âÊñáÈ±º", "È∏°Áà™", "ÈπåÈπë"
        ];
        
        let meats = [...defaultMeats];
        let excludedMeats = [];
        const resultElement = document.getElementById('result');
        const startBtn = document.getElementById('startBtn');
        const importBtn = document.getElementById('importBtn');
        const fileInput = document.getElementById('fileInput');
        const excludeOptionsContainer = document.getElementById('excludeOptions');
        
        // ÂàùÂßãÂåñÊéíÈô§ÈÄâÈ°π
        function initExcludeOptions() {
            excludeOptionsContainer.innerHTML = '';
            meats.forEach(meat => {
                const checkboxId = `exclude-${meat}`;
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = checkboxId;
                checkbox.className = 'exclude-checkbox';
                checkbox.value = meat;
                
                const label = document.createElement('label');
                label.htmlFor = checkboxId;
                label.className = 'exclude-label';
                label.textContent = meat;
                
                const wrapper = document.createElement('div');
                wrapper.appendChild(checkbox);
                wrapper.appendChild(label);
                
                excludeOptionsContainer.appendChild(wrapper);
                
                checkbox.addEventListener('change', (e) => {
                    if (e.target.checked) {
                        excludedMeats.push(meat);
                    } else {
                        excludedMeats = excludedMeats.filter(m => m !== meat);
                    }
                });
            });
        }
        
        // ÂºÄÂßãÈöèÊú∫ÈÄâÊã©
        startBtn.addEventListener('click', () => {
            const availableMeats = meats.filter(meat => !excludedMeats.includes(meat));
            
            if (availableMeats.length === 0) {
                resultElement.textContent = "Ê≤°ÊúâÂèØÈÄâËÇâÁ±ª";
                return;
            }
            
            startBtn.disabled = true;
            
            let counter = 0;
            const totalIterations = 20; // 2ÁßíÂÜÖÂàáÊç¢20Ê¨° (100msÊØèÊ¨°)
            const intervalTime = 100; // 100msÂàáÊç¢‰∏ÄÊ¨°
            
            const intervalId = setInterval(() => {
                const randomIndex = Math.floor(Math.random() * availableMeats.length);
                resultElement.textContent = availableMeats[randomIndex];
                resultElement.classList.add('flash');
                
                setTimeout(() => {
                    resultElement.classList.remove('flash');
                }, 50);
                
                counter++;
                if (counter >= totalIterations) {
                    clearInterval(intervalId);
                    startBtn.disabled = false;
                    
                    // ÊúÄÁªàÁªìÊûú
                    const finalIndex = Math.floor(Math.random() * availableMeats.length);
                    resultElement.textContent = availableMeats[finalIndex];
                    resultElement.style.fontSize = '2.2em';
                    resultElement.style.color = '#8c2318';
                    
                    setTimeout(() => {
                        resultElement.style.fontSize = '2em';
                        resultElement.style.color = '#5a3921';
                    }, 500);
                }
            }, intervalTime);
        });
        
        // ÂØºÂÖ•Ëá™ÂÆö‰πâÈÄâÈ°π
        importBtn.addEventListener('click', () => {
            fileInput.click();
        });
        
        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const content = event.target.result;
                    // Â∞ùËØïËß£Êûê‰∏∫JSON
                    try {
                        const jsonData = JSON.parse(content);
                        if (Array.isArray(jsonData)) {
                            meats = jsonData;
                            excludedMeats = [];
                            initExcludeOptions();
                            alert(`ÊàêÂäüÂØºÂÖ• ${jsonData.length} ‰∏™ÈÄâÈ°π`);
                            return;
                        }
                    } catch (e) {
                        // ‰∏çÊòØJSONÔºåÂ∞ùËØïÊåâË°åÂàÜÂâ≤
                        const lines = content.split(/[\r\n]+/).filter(line => line.trim());
                        if (lines.length > 0) {
                            meats = lines;
                            excludedMeats = [];
                            initExcludeOptions();
                            alert(`ÊàêÂäüÂØºÂÖ• ${lines.length} ‰∏™ÈÄâÈ°π`);
                            return;
                        }
                    }
                    throw new Error("Êó†Ê≥ïËß£ÊûêÊñá‰ª∂ÂÜÖÂÆπ");
                } catch (error) {
                    alert("ÂØºÂÖ•Â§±Ë¥•: " + error.message);
                    meats = [...defaultMeats];
                    excludedMeats = [];
                    initExcludeOptions();
                }
            };
            reader.readAsText(file);
        });
        
        // ÂàùÂßãÂåñÈ°µÈù¢
        initExcludeOptions();
    </script>
</body>
</html>